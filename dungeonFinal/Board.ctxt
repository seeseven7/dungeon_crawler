#BlueJ class context
comment0.target=Board
comment0.text=\n\ @author\ Frankie\n\ @version\ 1.0\n\ \n\ Oh\ nah\ this\ one's\ going\ to\ be\ rough\!\!\ Frankie\ Balla\ introduces\n\ the\ most\ documented\ Java\ code\ in\ history...\n
comment1.params=size
comment1.target=Board(int)
comment1.text=\n\ constructor(int\ size)\n\ Should\ take\ in\ the\ dimensions\ of\ the\ board\ a\ number\ between\ \n\ 1\ and\ 9\ and\ initialize\ a\ square\ board.\ \ It\ should\ then\ set\ \n\ every\ element\ of\ the\ board\ equal\ to\ null.\n
comment2.params=m
comment2.target=boolean\ isValid(Move)
comment2.text=\n\ \ boolean\ isValid(Move\ m)\ \u2013\ Returns\ true\ if\ the\ move\ is\ within\n\ \ the\ bounds\ of\ the\ room.\ Otherwise\ returns\ false.\n
comment3.params=
comment3.target=Move\ getRandomLoc()
comment3.text=\n\ \ (optional)\ Move\ getRandomLoc()\ \u2013\ helper\ method\ that\ returns\n\ \ a\ random\ position\ that\ is\ not\ yet\ filled.\n
comment4.params=loc
comment4.target=void\ setPlayer(Move)
comment4.text=\n\ void\ setPlayer(Move\ loc)\ \u2013\ Should\ set\ the\ player\ piece\ on\ the\n\ board\ at\ the\ specified\ location,\ and\ set\ the\ myLoc\ instance\ variable.\n
comment5.params=num
comment5.target=void\ setEnemies(int)
comment5.text=\n\ void\ setEnemies(int\ num)\ \u2013\ Should\ take\ in\ the\ number\ of\ enemies\ for\n\ the\ level.\ \ It\ should\ initialize\ the\ Move[]\ to\ have\ the\ length\ equal\n\ to\ the\ number\ of\ enemies.\ \ It\ should\ then\ pick\ a\ random\ location\ that\n\ is\ not\ yet\ filled,\ set\ them\ in\ that\ spot\ on\ the\ board,\ and\ save\ the\n\ location\ to\ the\ Move[]\ enemies\ (one\ Move\ location\ per\ index\ representing\n\ an\ enemy).\n
comment6.params=num
comment6.target=void\ setTreasure(int)
comment6.text=\n\ void\ setTreasure(int\ num)\ \u2013\ Treasure\ doesn\u2019t\ move,\ so\ it\ does\ not\n\ need\ any\ associated\ instance\ variable.\ \ Therefore,\ place\ the\ specified\n\ number\ of\ treasures\ on\ the\ board\ in\ random\ locations\ that\ are\ not\n\ already\ filled.\n
comment7.params=
comment7.target=void\ setExit()
comment7.text=\n\ Void\ setExit()\ \u2013\ Place\ the\ exit\ piece\ on\ a\ random\ square\ that\ is\ not\n\ already\ occupied\ by\ the\ other\ pieces.\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\n\ String\ toString()\ -\n\ Requirements\:\ An\ empty\ board\ printout\ must\ have\ the\ following.\ \ \n\ \n\ -\ All\ null\ locations\ should\ be\ printed\ as\ underscores.\ \ \n\ All\ locations\ with\ a\ piece\ in\ it\ should\ print\ as\ the\ Piece\u2019s\ symbol.\ \ \n\ \n\ -\ All\ locations\ should\ be\ separated\ by\ a\ space\n\ \n\ -\ There\ should\ be\ \u201Cwalls\u201D\ around\ the\ 4\ sides\ of\ our\ dungeon.\n\ Use\ the\ Bar\ |\ and\ u_n_d_e_r_s_c_o_r_e_s.\n\ \n\ -\ The\ rows\ and\ columns\ should\ be\ labeled\ as\ above.\ \ \n\ Rows\ are\ labeled\ with\ capital\ letters\ starting\ with\ A.\n\ Columns\ are\ labeled\ with\ numbers\ starting\ at\ 1.\n
numComments=9
